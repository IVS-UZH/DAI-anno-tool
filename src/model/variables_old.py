# This file is generated automatically
# Please do not edit

# Copyright 2018 Taras Zakharko (taras.zakharko)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.



from collections import namedtuple

Value = namedtuple("Value", ("key", "value", "mnemonic", "condition"))


Variables = (
Value("PoS", "Noun", "N", ((lambda: isToken).__code__)),
Value("PoS", "Adjective", "Adj", ((lambda: isToken).__code__)),
Value("PoS", "Verb", "V", ((lambda: isToken).__code__)),
Value("PoS", "Adverb", "Adv", ((lambda: isToken).__code__)),
Value("PoS", "Determiner", "Det", ((lambda: isToken).__code__)),
Value("PoS", "Pronoun", "Pro", ((lambda: isToken).__code__)),
Value("PoS", "Negation", "Neg", ((lambda: isToken).__code__)),
Value("PoS", "Conjunction", "Conj", ((lambda: isToken).__code__)),
Value("PoS", "Preposition", "Prep", ((lambda: isToken).__code__)),
Value("PoS", "Numeral", "Num", ((lambda: isToken).__code__)),
Value("PoS", "Quantifier", "Qnt", ((lambda: isToken).__code__)),
Value("PoS", "Interjection", "Intj", ((lambda: isToken).__code__)),
Value("Type", "proper", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Type", "common", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Type", "attributive", "", ((lambda: isToken and variables["PoS"] in ("Adjective", "Numeral", "Quantifier")).__code__)),
Value("Type", "predicative", "", ((lambda: isToken and variables["PoS"] in ("Adjective", "Numeral", "Quantifier")).__code__)),
Value("Type", "article", "ART", ((lambda: isToken and variables["PoS"] == "Determiner").__code__)),
Value("Type", "demonstrative", "DEM", ((lambda: isToken and variables["PoS"] in ("Determiner", "Pronoun")).__code__)),
Value("Type", "possessive", "POSS", ((lambda: isToken and variables["PoS"] == "Determiner").__code__)),
Value("Type", "distributive", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "personal", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "reciprocal", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "indefinite", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "WH", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "relative", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "reflexive", "REFL", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "impersonal", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "genitive/partitive (It. ne)", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "locative/existential (It. ci)", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Type", "lexical", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "auxiliary HAVE", "have", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "auxiliary venire", "venire", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "auxiliary stare", "stare", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "auxiliary BE", "be", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "modal", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "causative", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "support verb", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "copular verb", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Type", "existential", "", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Lexical subtype", "unaccusative", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical").__code__)),
Value("Lexical subtype", "reflexive", "REFL", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical").__code__)),
Value("Lexical subtype", "unergative", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical").__code__)),
Value("Lexical subtype", "transitive", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical").__code__)),
Value("Reflexive subtype", "retroherent", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical" and variables["Lexical subtype"] == "reflexive").__code__)),
Value("Reflexive subtype", "direct transitive", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical" and variables["Lexical subtype"] == "reflexive").__code__)),
Value("Reflexive subtype", "indirect unergative", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical" and variables["Lexical subtype"] == "reflexive").__code__)),
Value("Reflexive subtype", "indirect transitive", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical" and variables["Lexical subtype"] == "reflexive").__code__)),
Value("Reflexive subtype", "antipassive", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Type"] == "lexical" and variables["Lexical subtype"] == "reflexive").__code__)),
Value("Mode", "indicative", "IND", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "subjunctive", "SBJV", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "conditional", "COND", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "imperative", "IMP", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "infinitive", "INF", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "participle", "PTCP", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Mode", "gerund", "GER", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Participle subtype", "periphrastic", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Mode"] == "participle").__code__)),
Value("Participle subtype", "non periphrastic", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Mode"] == "participle").__code__)),
Value("Participle class", "strong", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Mode"] == "participle").__code__)),
Value("Participle class", "weak", "", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Mode"] == "participle").__code__)),
Value("Proximity", "proximal", "", ((lambda: isToken and variables["Type"] == "demonstrative").__code__)),
Value("Proximity", "medial", "", ((lambda: isToken and variables["Type"] == "demonstrative").__code__)),
Value("Proximity", "distal", "", ((lambda: isToken and variables["Type"] == "demonstrative").__code__)),
Value("Tense/Aspect", "present", "PRES", ((lambda: isToken and variables["PoS"] == "Verb").__code__)),
Value("Tense/Aspect", "perfect", "PRF", ((lambda: isToken and variables["PoS"] == "Verb" and not (variables["Mode"] in ["gerund", "participle"])).__code__)),
Value("Tense/Aspect", "past", "PAST", ((lambda: isToken and variables["PoS"] == "Verb" and variables["Mode"] == "participle").__code__)),
Value("Tense/Aspect", "future", "FUT", ((lambda: isToken and variables["PoS"] == "Verb" and not (variables["Mode"] in ["participle", "gerund"])).__code__)),
Value("Tense/Aspect", "imperfect", "IMPRF", ((lambda: isToken and variables["PoS"] == "Verb" and not (variables["Mode"] in ["participle", "gerund"])).__code__)),
Value("Realisation", "overt", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Realisation", "non overt", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Realisation", "clitic", "", ((lambda: isToken and variables["PoS"] == "Pronoun").__code__)),
Value("Person", "1st", "1", ((lambda: isToken and (variables["PoS"] in ("Pronoun", "Verb") and not (variables["Mode"] == "participle") and (variety == "Ripatransone" or not (variables["Mode"] == "gerund"))) or (variables["Type"] == "possessive")).__code__)),
Value("Person", "2nd", "2", ((lambda: isToken and (variables["PoS"] in ("Pronoun", "Verb") and not (variables["Mode"] == "participle") and (variety == "Ripatransone" or not (variables["Mode"] == "gerund"))) or (variables["Type"] == "possessive")).__code__)),
Value("Person", "3rd", "3", ((lambda: isToken and (variables["PoS"] in ("Pronoun", "Verb") and not (variables["Mode"] == "participle") and (variety == "Ripatransone" or not (variables["Mode"] == "gerund"))) or (variables["Type"] == "possessive")).__code__)),
Value("PersonNumber", "singular", "SG", ((lambda: isToken and variables["PoS"] == "Determiner" and variables["Type"] == "possessive").__code__)),
Value("PersonNumber", "plural", "PL", ((lambda: isToken and variables["PoS"] == "Determiner" and variables["Type"] == "possessive").__code__)),
Value("Sex", "masculine", "", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal" and ((variables["Person"] in ["1st", "2nd"]) or (variables["Realisation"] == "clitic" and variables["Person"] == "3rd" and variables["Animacy"] == "animate"))
).__code__)),
Value("Sex", "feminine", "", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal" and ((variables["Person"] in ["1st", "2nd"]) or (variables["Realisation"] == "clitic" and variables["Person"] == "3rd" and variables["Animacy"] == "animate"))
).__code__)),
Value("Subtype", "definite", "DEF", ((lambda: isToken and variables["PoS"] == "Determiner" and variables["Type"] == "article").__code__)),
Value("Subtype", "indefinite", "INDF", ((lambda: isToken and variables["PoS"] == "Determiner" and variables["Type"] == "article").__code__)),
Value("Position", "prenominal", "", ((lambda: isToken and variables["PoS"] in ("Adjective", "Determiner", "Numeral", "Quantifier")).__code__)),
Value("Position", "postnominal", "", ((lambda: isToken and variables["PoS"] in ("Adjective", "Determiner", "Numeral", "Quantifier")).__code__)),
Value("Position", "preverbal", "", ((lambda: isToken and variables["PoS"] == "Adverb").__code__)),
Value("Position", "postverbal", "", ((lambda: isToken and variables["PoS"] == "Adverb").__code__)),
Value("Position", "preparticipial", "", ((lambda: isToken and variables["PoS"] == "Adverb").__code__)),
Value("Position", "postparticipial", "", ((lambda: isToken and variables["PoS"] == "Adverb").__code__)),
Value("Countness", "count", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Countness", "non count", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Hybrid", "hybrid", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Hybrid", "non hybrid", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Committee", "committee", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Committee", "non committee", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Animacy", "animate", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Animacy", "inanimate", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Human", "yes", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Human", "no", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Unspecified human subject", "yes", "", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal" and (variables["Realisation"] =="non overt")).__code__)),
Value("Unspecified human subject", "no", "", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal" and (variables["Realisation"] =="non overt")).__code__)),
Value("Abstract", "yes", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Abstract", "no", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun")).__code__)),
Value("Gender", "masculine", "M", ((lambda: isToken and ((variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Pronoun")) or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "past") or (variables["PoS"] == "Verb" and variety == "Ripatransone")) or (variables["Type"] == "personal")).__code__)),
Value("Gender", "feminine", "F", ((lambda: isToken and ((variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Pronoun")) or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "past") or (variables["PoS"] == "Verb" and variety == "Ripatransone")) or (variables["Type"] == "personal")).__code__)),
Value("Gender", "(mass) neuter", "N", ((lambda: isToken and (variety in ["Ripatransone", "Aguone"]) and ((variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Pronoun")) or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "past") or (variables["PoS"] == "Verb" and variety == "Ripatransone")) or (variables["Type"] == "personal")).__code__)),
Value("Gender", "neuter", "N", ((lambda: isToken and not (variety in ["Ripatransone", "Aguone"]) and ((variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Pronoun")) or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "past") or (variables["PoS"] == "Verb" and variety == "Ripatransone")) or (variables["Type"] == "personal")).__code__)),
Value("Gender", "non autonomous neuter", "NAN", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Gender", "non feminine", "non-F", ((lambda: isToken and not (variety in ["Verbicaro", "Altamura"])  and (variables["PoS"] in ("Numeral", "Quantifier", "Adjective", "Pronoun") or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "perfect"))).__code__)),
Value("Gender", "non feminine singular", "non-F-sg", ((lambda: isToken and (((variety in ["Verbicaro", "Altamura"])  and (variables["PoS"] in ("Numeral", "Quantifier", "Adjective", "Pronoun") or (variables["Mode"] == "participle" and variables["Tense/Aspect"] == "perfect")))) or (variables["PoS"]  == "Determiner")).__code__)),
Value("Number", "singular", "SG", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Verb") and (variety == "Ripatransone" or not (variables["Mode"] == "gerund"))).__code__)),
Value("Case", "Subject", "SBJ", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal").__code__)),
Value("Case", "Direct object", "DO", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal").__code__)),
Value("Case", "Indirect object", "IO", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal").__code__)),
Value("Case", "Comitative", "COM", ((lambda: isToken and variables["PoS"] == "Pronoun" and variables["Type"] == "personal").__code__)),
Value("Number", "plural", "PL", ((lambda: isToken and variables["PoS"] in ("Noun", "Pronoun", "Adjective", "Adverb", "Determiner", "Numeral", "Quantifier", "Verb") and (variety == "Ripatransone" or not (variables["Mode"] == "gerund"))).__code__)),
Value("IC", "I", "I", ((lambda: isToken and variables["PoS"] in ("Noun", "Quantifier", "Adjective", "Adverb", "Numeral", "Verb")).__code__)),
Value("IC", "II", "II", ((lambda: isToken and variables["PoS"] in ("Noun", "Quantifier", "Adjective", "Adverb", "Numeral", "Verb")).__code__)),
Value("IC", "III", "III", ((lambda: isToken and variables["PoS"] in ("Noun", "Quantifier", "Adjective", "Numeral", "Verb")).__code__)),
Value("IC", "IV", "IV", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Verb")).__code__)),
Value("IC", "V", "V", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Verb")).__code__)),
Value("IC", "VI", "VI", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Verb")).__code__)),
Value("IC", "VII", "VII", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Verb")).__code__)),
Value("IC", "VIII", "VIII", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Verb")).__code__)),
Value("IC", "IX", "IX", ((lambda: isToken and variables["PoS"] in ("Noun", "Verb")).__code__)),
Value("IC", "X", "X", ((lambda: isToken and variables["PoS"] in ("Noun", "Verb")).__code__)),
Value("Inflection Subtype", "full", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb",  "Numeral", "Quantifier", "Verb") and variety == "Ripatransone").__code__)),
Value("Inflection Subtype", "reduced", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb",  "Numeral", "Quantifier", "Verb") and variety == "Ripatransone").__code__)),
Value("Stem Alternation", "yes", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb",  "Verb", "Numeral", "Quantifier")).__code__)),
Value("Stem Alternation", "no", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb",  "Verb", "Numeral", "Quantifier")).__code__)),
Value("Contextual", "yes", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Contextual", "no", "", ((lambda: isToken and variables["PoS"] == "Noun").__code__)),
Value("Gender Contextual", "masculine", "M", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Gender Contextual", "feminine", "F", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Gender Contextual", "(mass) neuter", "N", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Gender Contextual", "non autonomous neuter", "NAN", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Number Contextual", "singular", "SG", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Number Contextual", "plural", "PL", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "I", "I", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "II", "II", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "III", "III", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "IV", "IV", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "V", "V", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "VI", "VI", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "VII", "VII", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "VIII", "VIII", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "IX", "IX", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("IC Contextual", "X", "X", ((lambda: isToken and variables["PoS"] == "Noun" and variety == "Ripatransone").__code__)),
Value("Neutralization (phonological)", "yes", "", ((lambda: isToken and (variables["PoS"] in ("Noun", "Adjective", "Quantifier", "Verb") and variety in ("Verbicaro", "Ripatransone")) or (variables["PoS"] == "Adverb")
).__code__)),
Value("Neutralization (phonological)", "no", "", ((lambda: isToken and (variables["PoS"] in ("Noun", "Adjective", "Quantifier", "Verb") and variety in ("Verbicaro", "Ripatransone")) or (variables["PoS"] == "Adverb")
).__code__)),
Value("Scope", "wide", "", ((lambda: isToken and variables["PoS"] in ("Numeral", "Quantifier")).__code__)),
Value("Scope", "narrow", "", ((lambda: isToken and variables["PoS"] in ("Numeral", "Quantifier")).__code__)),
Value("Focus", "yes", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Pronoun", "Quantifier", "Verb") and variables["Realisation"] != "non overt").__code__)),
Value("Focus", "no", "", ((lambda: isToken and variables["PoS"] in ("Noun", "Adjective", "Adverb", "Determiner", "Numeral", "Pronoun", "Quantifier", "Verb") and variables["Realisation"] != "non overt").__code__)),
Value("PhraseType", "NP", "NP", ((lambda: isConstituent).__code__)),
Value("PhraseType", "PP", "PP", ((lambda: isConstituent).__code__)),
Value("PhraseType", "AP", "AP", ((lambda: isConstituent).__code__)),
Value("PhraseType", "Clause", "Clause", ((lambda: isConstituent).__code__)),
Value("PhraseType", "Conjoined NPs", "Conjoined NPs", ((lambda: isConstituent).__code__)),
Value("PhraseType", "AdvP", "AdvP", ((lambda: isConstituent).__code__)),
Value("PhraseType", "QP", "QP", ((lambda: isConstituent).__code__)),
Value("GrammRel", "Subject", "Subject", ((lambda: isConstituent).__code__)),
Value("GrammRel", "Direct object", "Direct object", ((lambda: isConstituent).__code__)),
Value("GrammRel", "Indirect object", "Indirect object", ((lambda: isConstituent).__code__)),
Value("Position", "Preverbal", "", ((lambda: isConstituent and  variables["GrammRel"] in ("Subject", "Object")).__code__)),
Value("Position", "Postverbal", "", ((lambda: isConstituent and  variables["GrammRel"] in ("Subject", "Object")).__code__)),
Value("Compound Tenses", "Compound perfect", "Compound perfect", ((lambda: isConstituent).__code__)),
Value("Compound Tenses", "Compound future", "Compound future", ((lambda: isConstituent).__code__)),
Value("Compound Tenses", "Pluperfect", "Compound tense (pluperfect)", ((lambda: isConstituent).__code__)),
Value("Compound Tenses", "Passive", "Compound tense (passive)", ((lambda: isConstituent).__code__)),
Value("Periphrases", "progressive", "progressive", ((lambda: isConstituent).__code__)),
Value("Periphrases", "comparative", "comparative", ((lambda: isConstituent).__code__)),
Value("Periphrases", "superlative", "superlative", ((lambda: isConstituent).__code__)),
Value("Type", "NP Agreement", "NP Agreement", ((lambda: isDependency).__code__)),
Value("Type", "Antecedent-Relative", "Antecedent-Relative", ((lambda: isDependency).__code__)),
Value("Type", "Part Agreement", "", ((lambda: isDependency).__code__)),
Value("Type", "Infl Agreement", "Infl Agreement", ((lambda: isDependency).__code__)),
Value("Type", "Predicative Agreement", "Predicative Agreement", ((lambda: isDependency).__code__)),
Value("Type", "Quantifier Agreement", "Quantifier Agreement", ((lambda: isDependency).__code__)),
Value("Type", "Possessor-Possessed", "Possessor-Possessed", ((lambda: isDependency).__code__)),
Value("Type", "Antecedent-Anaphor", "Antecedent-Anaphor", ((lambda: isDependency).__code__)),
Value("Type", "Antecedent-Reflexive", "Antecedent-Reflexive", ((lambda: isDependency).__code__)),
Value("Type", "Adverbial Agreement", "Adverbial Agreement", ((lambda: isDependency).__code__)),
Value("Type", "Subject-Adjunct", "Subject-Adjunct", ((lambda: isDependency).__code__)),
Value("Subtype", "Subject-Part(Predicate)", "Subject-Part(Predicate)", ((lambda: isDependency and  variables["Type"]== "Part Agreement").__code__)),
Value("Subtype", "Direct Object-Part(Predicate)", "Direct Object-Part(Predicate)", ((lambda: isDependency and  variables["Type"]== "Part Agreement").__code__)),
Value("Subtype", "Indirect Object-Part(Predicate)", "Indirect Object-Part(Predicate)", ((lambda: isDependency and  variables["Type"]== "Part Agreement").__code__))
)

__all__ = ["Variables"]

